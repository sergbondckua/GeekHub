"""
–ë–∞–Ω–∫–æ–º–∞—Ç 4.0
"""

import sqlite3
import json
import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from colorama import init, Fore, Back, Style

init(autoreset=True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Style.RESET_ALL –≤ –∫—ñ–Ω–µ—Ü—å print
conn = sqlite3.connect('atm.db')  # –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î


class AtmException(Exception):
    pass


class Client:
    """–û–ø—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞"""
    conn = sqlite3.connect('atm.db')  # –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
    with conn:
        cursor = conn.cursor()  # —Å—Ç–≤–æ—Ä—é—î–º–æ –∫—É—Ä—Å–æ—Ä

    def __init__(self, username):
        self.user = self.cursor.execute(
            """SELECT * FROM users WHERE username = ?""",
            (username,)).fetchone()
        self.login = self.user[1]
        self.password = self.user[2]
        self.balance = self.user[3]
        self.staff = self.user[4]

    def get_balance(self) -> int:
        """–ü–æ–∫–∞–∑—É—î –±–∞–ª–∞–Ω—Å –∫–ª—ñ—î–Ω—Ç–∞"""
        return int(self.balance)

    def change_balance(self, new_balance):
        """–û–Ω–æ–≤–ª—é—î –±–∞–ª–∞–Ω—Å –∫–ª—ñ—î–Ω—Ç–∞ –≤ –ë–î"""
        self.cursor.execute(
            """UPDATE users SET balance = ?
                WHERE username = ?""", (new_balance, self.login))
        self.conn.commit()

    def get_statement(self) -> list:
        """–í–∏–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–ª—ñ—î–Ω—Ç–∞"""
        return self.cursor.execute(
            """SELECT orders FROM statement WHERE username = ?
                ORDER BY id DESC""",
            (self.login,)).fetchall()


class Atm:
    """–û–ø—Ü—ñ—ó –±–∞–Ω–∫–æ–º–∞—Ç—É"""
    conn = sqlite3.connect('atm.db')  # –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
    with conn:
        cursor = conn.cursor()  # —Å—Ç–≤–æ—Ä—é—î–º–æ –∫—É—Ä—Å–æ—Ä

    def get_atm_balance(self) -> int:
        """–û—Ç—Ä–∏–º—É—î –±–∞–ª–∞–Ω—Å –±–∞–Ω–∫–æ–º–∞—Ç—É"""
        query = self.cursor.execute(
            "SELECT * FROM money_bills ORDER BY bill DESC").fetchall()
        return sum([x[0] * x[1] for x in query])

    def all_nominal(self) -> list:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –Ω–æ–º—ñ–Ω–∞–ª—å–Ω–∏—Ö –±–∞–Ω–∫–Ω–æ—Ç"""
        query = self.cursor.execute(
            "SELECT * FROM money_bills ORDER BY bill DESC").fetchall()
        return [i[0] for i in query for _ in range(i[1])]

    def dict_nominal(self) -> dict:
        query = self.cursor.execute(
            "SELECT * FROM money_bills ORDER BY bill DESC").fetchall()
        return {i[0]: i[1] for i in query}

    def min_banknotes(self) -> int:
        return self.cursor.execute(
            "SELECT MIN(bill) FROM money_bills").fetchone()[0]

    def get_all_statements(self) -> list:
        return self.cursor.execute(
            """SELECT * FROM statement ORDER BY id DESC """).fetchall()


def auth_validate(login: str) -> bool | None:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    user = Client(login)
    for attempt in range(3):
        if user.password == input(
                f"Input your password, you have {3 - attempt} attempts "):
            return True
        else:
            if attempt != 2:
                print(
                    f"Wrong password, try again, have {2 - attempt} attempts ")
            else:
                print('Too many attempts')
                return close()
    return False


def write_statement(client: str, **kwargs):
    """–ó–∞–ø–∏—Å—É—î –≤ —Ñ–∞–π–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞"""

    #  –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤–∏–ø–∏—Å–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    data = {
        "id": random.randint(0, 99999999),
        "time": datetime.now().timestamp().__int__(),
        "description": kwargs["desc"],
        "amount": kwargs["amount"],
        "balance": kwargs["balance"]
    }
    data = json.dumps(data)
    with conn:
        cursor = conn.cursor()
        cursor.execute(
            f"""INSERT INTO statement (username, orders)
                VALUES (?,?)""", (client, data))
        conn.commit()


def close():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("Bye!")
    exit()


def validate_same_password(passwd: str) -> str:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–∞–∫–æ–≤—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—ñ–≤"""
    password_2 = input(Fore.LIGHTMAGENTA_EX +
                       "Repeat your password: ").strip()
    if passwd == password_2:
        return passwd
    else:
        print(Fore.RED + "Passwords don't match!")
        while True:
            new_password = input(Fore.LIGHTMAGENTA_EX +
                                 "Enter new password: ").strip()
            if validate_diff_passwd(new_password):
                break
        return validate_same_password(new_password)


def validate_diff_passwd(passwd: str):
    """ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
    if len(passwd) < 8:
        print("Password must be longer than 7 characters")
        return False
    elif not any([char.isdigit() for char in passwd]):
        print("Password must have at least one digit")
        return False
    elif not any([char.isupper() for char in passwd]):
        print("Password must contain an uppercase letter")
        return False
    return True


def sign_up():
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
    print(Fore.LIGHTRED_EX + "Registration".center(100, '~'))
    with conn:
        cursor = conn.cursor()
        users = cursor.execute("SELECT username FROM users").fetchall()

    client = input("Input username: ").strip()
    if client in [name[0] for name in users]:
        print('Name is already registered, try again with unique name')
        return sign_up()

    while True:
        passwd = input(Fore.LIGHTMAGENTA_EX + "Enter password: ").strip()
        if validate_diff_passwd(passwd):
            break

    password = validate_same_password(passwd)
    # –®–∞–Ω—Å 10% –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ $100
    bonus = 100 if random.random() < 0.1 else 0
    with conn:
        cursor.execute(
            """INSERT INTO users (username, password, balance, staff)
                VALUES (?,?,?,?)""", (client, password, bonus, "client")
        )
        conn.commit()
    print(Fore.GREEN +
          "Registered done. Wellcome to ATM!".center(100, '~'))
    return client_menu(client)


def get_client_balance_menu(client: str):
    balance = Client(client).get_balance()
    print(Fore.YELLOW + f"{client.capitalize()}, "
                        f"your balance is "
                        f"{Fore.BLACK}{Back.YELLOW}${balance}"
                        f"{Style.RESET_ALL}\n")


def make_deposit(client: str) -> tuple:
    """–ü–æ–ø–æ–≤–Ω—é—î –±–∞–ª–∞–Ω—Å"""
    with conn:
        cursor = conn.cursor()
        min_bill = cursor.execute(
            "SELECT MIN(bill) FROM money_bills").fetchone()[0]

        current_balance = Client(client).get_balance()
        deposit = abs(int(input(Fore.LIGHTMAGENTA_EX +
                                "Enter your deposit: $").strip()))
        new_balance = 0
        rest = deposit % min_bill

        if deposit >= min_bill:  # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –±—ñ–ª—å—à–∞ –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—É–ø—é—Ä—É
            if rest != 0:  # –Ø–∫—â–æ –Ω–µ –∫—Ä–∞—Ç–Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ–π –∫—É–ø—é—Ä—ñ
                new_balance = current_balance + deposit - rest
                deposit -= rest
                print(Fore.RED + f"Bills are not supported, refund: ${rest}")
            else:
                new_balance = current_balance + deposit

            Client(client).change_balance(new_balance)
            write_statement(
                client, desc="Deposit", amount=deposit, balance=new_balance)
            print(Fore.LIGHTGREEN_EX +
                  f"{client.capitalize()}, "
                  f"now {Back.LIGHTBLACK_EX}+${deposit}"
                  f"{Style.RESET_ALL + Fore.LIGHTGREEN_EX} and "
                  f"your new balance is {Back.LIGHTBLACK_EX}"
                  f"üî∫${new_balance}{Style.RESET_ALL}\n"
                  )
        else:
            print(Back.LIGHTRED_EX + Fore.LIGHTWHITE_EX +
                  f"Bills are not supported! Refund money: ${deposit}"
                  f"{Style.RESET_ALL}\n")
        return deposit, new_balance


def withdraw_balance(amount_funds: int) -> list:
    """–û–Ω–æ–≤–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–º—ñ–Ω–∞–ª—ñ–≤ –∫—É–ø—é—Ä"""

    with conn:
        cursor = conn.cursor()
    # —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫—É–ø—é—Ä —ñ–∑ –±–∞–Ω–∫–æ–º–∞—Ç–∞
    kit = Atm().all_nominal()
    sums = {0: 0}

    for i in range(1, len(kit)):
        value = kit[i - 1]  # –Ω–æ–º—ñ–Ω–∞–ª –¥–æ–¥–∞–≤–∞–Ω–æ—ó –∫—É–ø—é—Ä–∏
        new_sums = {}  # –∑–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤—ñ —Å—É–º–∏, –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ—ó –∫—É–ø—é—Ä–∏ value
        for suma in sums.keys():
            new_sum = suma + value
            if new_sum > amount_funds:
                continue
            elif new_sum not in sums.keys():
                new_sums[new_sum] = value
        sums = sums | new_sums  # –¥–æ–¥–∞—î–º (–æ–±'—î–¥–Ω—É—î–º–æ) –∑–Ω–∞—á–µ–Ω–Ω—è
        if amount_funds in sums.keys():
            break  # –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Å—É–º—É

    withdraw_banknotes = []
    if amount_funds not in sums.keys():
        raise AtmException(
            "There are no banknotes to issue the specified amount\n")
    else:
        rem = amount_funds
        while rem > 0:
            withdraw_banknotes.append(sums[rem])
            rem -= sums[rem]

    # —Å–ª–æ–≤–Ω–∏–∫ –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –Ω–æ–º—ñ–Ω–∞–ª—ñ–≤ –∫—É–ø—é—Ä —ñ–∑ –ë–î
    db_upload = Atm().dict_nominal()

    # —Ñ–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –Ω–æ–º—ñ–Ω–∞–ª—ñ–≤ –∫—É–ø—é—Ä
    db_out = {i: withdraw_banknotes.count(i) for i in withdraw_banknotes}

    # –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ –≤–∏–¥–∞–Ω—ñ –∫—É–ø—é—Ä–∏
    for key, value in db_out.items():
        db_upload[key] -= value

    # –û–Ω–æ–≤–ª—é—î–º–æ –ë–î –∑ –Ω–æ–≤–∏–º –∑–∞–ª–∏—à–∫–æ–º
    for bill, count in db_upload.items():
        with conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE money_bills SET count = ? WHERE bill= ?", (count, bill)
            )
        conn.commit()
    return withdraw_banknotes


def make_withdraw(client: str) -> tuple:
    """–ó–Ω—ñ–º–∞—î –∫–æ—à—Ç–∏, –∑–º–µ–Ω—à—É—î –±–∞–ª–∞–Ω—Å"""

    min_bill = Atm().min_banknotes()  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –Ω–æ–º—ñ–Ω–∞–ª –∑ –ê–¢–ú
    amount = abs(int(input(Fore.LIGHTMAGENTA_EX +
                           "What amount to withdraw?: $").strip()))
    current_balance = Client(client).get_balance()
    new_balance = current_balance - amount
    atm_balance = Atm().get_atm_balance()

    if atm_balance - amount >= 0 and new_balance >= 0:
        if amount % min_bill == 0:
            try:
                print("Your banknotes:", withdraw_balance(amount))
            except AtmException as ex:
                print(ex)
                make_withdraw(client)
            else:
                Client(client).change_balance(new_balance)
                write_statement(
                    client,
                    desc="Withdraw",
                    amount=-amount,
                    balance=new_balance
                )
                print(Fore.LIGHTGREEN_EX +
                      f"{client.capitalize()}, "
                      f"now {Back.LIGHTBLACK_EX}-${amount}"
                      f"{Style.RESET_ALL + Fore.LIGHTGREEN_EX} and "
                      f"your new balance is {Back.LIGHTBLACK_EX}"
                      f"üîª${new_balance}{Style.RESET_ALL}\n")
            return amount, new_balance
        else:
            print("Input positive amount which is multiple by zero")
    else:
        print(Fore.RED + f"It is not possible to withdraw "
                         f"{Fore.BLACK}{Back.RED}${amount}{Style.RESET_ALL}"
                         f"{Fore.RED}, your balance: {Back.LIGHTWHITE_EX}"
                         f"${Client(client).get_balance()}{Style.RESET_ALL}"
                         f"{Fore.RED}, ATM balance: {Back.LIGHTWHITE_EX}"
                         f"${atm_balance}{Style.RESET_ALL}"
              )


def get_statement(client):
    return [print(i[0], end="\n") for i in Client(client).get_statement()]


# –ú–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞
def client_menu(client):
    choice = input("Select:\n"
                   "1Ô∏è‚É£ - Balance\n"
                   "2Ô∏è‚É£ - Deposit\n"
                   "3Ô∏è‚É£ - Withdraw\n"
                   "4Ô∏è‚É£ - Statement\n"
                   "5Ô∏è‚É£ - Deposit chart\n"
                   "6Ô∏è‚É£ - Log Out\n"
                   "Make your choice: ")
    choices = {
        "1": get_client_balance_menu,
        "2": make_deposit,
        "3": make_withdraw,
        "4": get_statement,
        "5": show_plot
    }
    choices.get(choice, "6")(client) if choices.get(choice) else main()
    return client_menu(client)


def show_plot(client: str):
    """–ü–æ–∫–∞–∑—É—î –≥—Ä–∞—Ñ—ñ–∫ –ø–æ–ø–æ–≤–Ω–µ–Ω—å —Ä–∞—Ö—É–Ω–∫—É"""

    statement = Client(client).get_statement()
    total = [json.loads(i[0]) for i in statement]
    plus = [i["amount"] for i in total if i["description"] == "Deposit"][::-1]

    if plus:
        data = {"Deposit": plus}
        df = pd.DataFrame(data)
        x = np.arange(len(plus))
        plt.axis([0, len(plus), 1, 1000 if not plus else max(plus)])
        plt.plot(x, df)
        plt.legend(data, loc=1)
        plt.show()
    else:
        print("No deposits found. "
              "Multiple deposits are required to display the chart")
    return client_menu(client)


def revision_bills(login: str):
    """Check money in ATM"""
    print(Fore.BLACK + Back.LIGHTYELLOW_EX +
          f"ATM balance: ${Atm().get_atm_balance()}{Style.RESET_ALL}\n"
          f"Content availability:")
    for bill, count in Atm().dict_nominal().items():
        print("üí∞", bill, "‚á¢", count, "pcs")
    return collector_menu(login)


def change_bills(login: str):
    """Change money in ATM"""

    add_money = Atm().dict_nominal()
    choice = {str(num + 1): bill for num, bill in enumerate(add_money.keys())}
    [print(f'press [{num}] --> üíµ{bill}') for num, bill in choice.items()]
    change = input(f"What bill are we changing?: ").strip()
    choose = choice.get(change)

    if choose in add_money.keys():
        amount = int(input(
            "What is the amount (use '-' to reduce): ").strip())
        result = add_money.get(choose) + amount
        if result < 0:
            print(Fore.WHITE + Back.LIGHTRED_EX +
                  f"Wrong entry, not enough ${choose} banknotes to withdraw. "
                  f"Available only: {add_money.get(choose)} pcs")
        else:
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
            with conn:
                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE money_bills SET count = ? WHERE bill = ?",
                    (result, choose)
                )
            conn.commit()
            write_statement(login,
                            desc="Change money",
                            amount={choose: amount},
                            balance={choose: result}
                            )
            print(Fore.BLACK + Back.LIGHTYELLOW_EX +
                  f"Banknote üíµ${choose} has been changed to {amount} pcs."
                  f" Now üíµ${choose} total: {result} pcs.")
    else:
        print("Not found banknote")

    return collector_menu(login)


def all_statements(client):
    with conn:
        cursor = conn.cursor()
        statement = Atm().get_all_statements(client)
        [print(i, end="\n") for i in sorted(statement, key=lambda x: x[1])]


# –ú–µ–Ω—é —ñ–Ω–∫–∞—Å–∞—Ç–æ—Ä–∞
def collector_menu(client):
    choice = input("Select:\n"
                   "1 - Balance\n"
                   "2 - Change Banknotes\n"
                   "3 - Statement\n"
                   "4 - Log Out\n"
                   "Make your choice: ")
    choices = {
        "1": revision_bills,
        "2": change_bills,
        "3": all_statements,
    }
    choices.get(choice, "4")(client) if choices.get(choice) else main()
    return collector_menu(client)


def main():
    # –ì–æ–ª–æ–≤–Ω–µ –ú–ï–ù–Æ
    choice = input("MENU:\n"
                   "1 - Sign In\n"
                   "2 - Sign Up\n"
                   "3 - Exit\n"
                   "Make your choice: ").strip()
    if choice == "1":
        login = input('Please input your login: ')
        try:
            Client(login)
        except Exception:
            if input(
                    "User not found\n"
                    "You want Sign up? - yes/no: ").strip() in ["yes", "y"]:
                sign_up()
            else:
                close()
        else:
            user = Client(login)
            user_status = user.staff
            if user_status == 'client':
                if auth_validate(login):
                    client_menu(login)
            if user_status == 'collector':
                if auth_validate(login):
                    collector_menu(login)

    elif choice == "2":
        sign_up()
    else:
        print("Access denied!")
        close()


if __name__ == '__main__':
    main()

